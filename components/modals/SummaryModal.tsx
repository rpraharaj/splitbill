// components/modals/SummaryModal.tsx
import React from 'react';
import Modal from '../Modal';
import { Expense, Group, Debt, User, SplitType, SupportedCurrency } from '../../types';
import { formatCurrency, formatDate } from '../../utils/formatting';
import { commonButtonClass } from '../../constants';
import { ArrowDownTrayIcon } from '../icons';

// Extend window type for jsPDF and autoTable
declare global {
    interface Window {
        jspdf: any; // Using any for simplicity with CDN library
    }
}

interface SummaryModalProps {
    isOpen: boolean;
    onClose: () => void;
    group: Group | null;
    expenses: Expense[];
    debts: Debt[];
    users: User[];
    darkMode: boolean;
    selectedCurrency: SupportedCurrency;
}

// Helper function to sanitize strings for PDF rendering
const sanitizePdfString = (str: string): string => {
  if (!str) return '';
  // Removes most characters outside the basic Latin, Latin-1 Supplement, and common punctuation.
  // This will strip many emojis and complex symbols not typically supported by jsPDF's standard fonts.
  return str.replace(/[^\x20-\x7E\u00A0-\u00FF]/g, '').trim();
};

// Helper function to format amounts for PDF without currency symbol
const formatAmountForPdf = (amount: number): string => {
  return amount.toLocaleString('en-US', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  });
};


const SummaryModal: React.FC<SummaryModalProps> = ({ isOpen, onClose, group, expenses, debts, users, darkMode, selectedCurrency }) => {
    if (!isOpen || !group) return null;

    const nonSettlementExpenses = expenses.filter(exp => !exp.isSettlement);
    const getUserName = (userId: string) => users.find(u => u.id === userId)?.name || 'Unknown User';
    const groupNameSanitizedForFilename = group.name.replace(/[^a-z0-9]/gi, '_').toLowerCase();

    // PDF specific colors (light theme focused for "certificate" style)
    const pdfColors = {
        border: [180, 180, 180], 
        titleText: [44, 62, 80], 
        sectionHeaderText: [52, 73, 94],
        bodyText: [51, 51, 51], 
        expenseHeaderBg: [52, 152, 219], 
        settlementHeaderBg: [46, 204, 113],
        headerText: [255, 255, 255], 
        tableLine: [220, 220, 220],
        alternateRowBg: [240, 249, 255],
        footerText: [120, 120, 120], 
    };


    const drawPageChrome = (doc: any, data: any) => {
        const pageCount = doc.internal.getNumberOfPages();
        doc.setFontSize(8);
        doc.setTextColor(pdfColors.footerText[0], pdfColors.footerText[1], pdfColors.footerText[2]);
        
        const pageNumberText = `Page ${data.pageNumber} of ${pageCount}`;
        doc.text(pageNumberText, doc.internal.pageSize.getWidth() - 15, doc.internal.pageSize.getHeight() - 7, { align: 'right' });
        
        const generatedText = `Generated by SettleUp | ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`;
        doc.text(generatedText, 15, doc.internal.pageSize.getHeight() - 7);

        doc.setDrawColor(pdfColors.border[0], pdfColors.border[1], pdfColors.border[2]);
        doc.setLineWidth(0.5);
        doc.rect(10, 10, doc.internal.pageSize.getWidth() - 20, doc.internal.pageSize.getHeight() - 20);
    };


    const handleDownloadPDF = () => {
        try {
            if (typeof window.jspdf !== 'object' || typeof window.jspdf.jsPDF !== 'function') {
                alert("PDF generation library (jsPDF) is not fully loaded. Please try again in a moment.");
                console.error("jsPDF core not ready.");
                return;
            }

            const jsPDFConstructor = window.jspdf.jsPDF;
            const doc = new jsPDFConstructor({ orientation: 'p', unit: 'mm', format: 'a4' });

            if (typeof (doc as any).autoTable !== 'function') {
                alert("jsPDF autoTable plugin is not correctly attached or loaded. PDF cannot be generated.");
                console.error("doc.autoTable is not a function.");
                return;
            }

            const pageMargin = 15;
            const pageWidth = doc.internal.pageSize.getWidth();
            let currentY = pageMargin + 5; 

            // Main Title Block
            doc.setFontSize(26);
            doc.setFont("helvetica", "bold");
            doc.setTextColor(pdfColors.titleText[0], pdfColors.titleText[1], pdfColors.titleText[2]);
            doc.text("Expense Summary", pageWidth / 2, currentY + 8, { align: 'center' }); 
            currentY += 10; 

            doc.setFontSize(16);
            doc.setFont("helvetica", "normal");
            doc.setTextColor(pdfColors.sectionHeaderText[0], pdfColors.sectionHeaderText[1], pdfColors.sectionHeaderText[2]);
            const sanitizedGroupName = sanitizePdfString(group.name);
            doc.text(`For Group: ${sanitizedGroupName}`, pageWidth / 2, currentY + 6, { align: 'center' }); 
            currentY += 10; 

            // Add Currency Information
            doc.setFontSize(10);
            doc.setFont("helvetica", "italic");
            doc.setTextColor(pdfColors.bodyText[0], pdfColors.bodyText[1], pdfColors.bodyText[2]);
            doc.text(`All amounts are in: ${selectedCurrency}`, pageWidth / 2, currentY + 4, { align: 'center' });
            currentY += 8;


            doc.setLineWidth(0.3);
            doc.setDrawColor(pdfColors.border[0], pdfColors.border[1], pdfColors.border[2]);
            doc.line(pageMargin + 5, currentY, pageWidth - (pageMargin + 5), currentY); 
            currentY += 10;
            
            doc.setFontSize(14);
            doc.setFont("helvetica", "bold");
            doc.setTextColor(pdfColors.sectionHeaderText[0], pdfColors.sectionHeaderText[1], pdfColors.sectionHeaderText[2]);
            doc.text("Expense Details", pageMargin, currentY);
            currentY += 7;

            const headExpenses = [['Date', 'Description', 'Category', 'Total', 'Paid By', 'Split Details']];
            const bodyExpenses = nonSettlementExpenses.map(exp => {
                const paidByStr = exp.payers.map(p => `${sanitizePdfString(getUserName(p.userId))}: ${formatAmountForPdf(p.amountPaid)}`).join('\n');
                const splitDetailsStr = exp.splitDetails.map(sd => {
                    let detail = `${sanitizePdfString(getUserName(sd.userId))}: ${formatAmountForPdf(sd.owes)}`;
                    if (exp.splitType === SplitType.PERCENTAGE && sd.percentage) detail += ` (${sd.percentage}%)`;
                    if (exp.splitType === SplitType.SHARES && sd.shares) detail += ` (${sd.shares} sh.)`;
                    return detail;
                }).join('\n');
                return [
                    formatDate(exp.date),
                    sanitizePdfString(exp.description),
                    sanitizePdfString(exp.category || '-'),
                    formatAmountForPdf(exp.totalAmount),
                    paidByStr,
                    splitDetailsStr
                ];
            });
            
            (doc as any).autoTable({
                startY: currentY,
                head: headExpenses,
                body: bodyExpenses,
                theme: 'striped',
                headStyles: { 
                    fillColor: pdfColors.expenseHeaderBg, 
                    textColor: pdfColors.headerText, 
                    fontStyle: 'bold',
                    fontSize: 9,
                },
                styles: { 
                    fontSize: 8, 
                    cellPadding: 1.8, 
                    lineColor: pdfColors.tableLine, 
                    lineWidth: 0.1,
                    textColor: pdfColors.bodyText
                },
                alternateRowStyles: { 
                    fillColor: pdfColors.alternateRowBg
                },
                tableLineColor: pdfColors.tableLine,
                margin: { left: pageMargin, right: pageMargin }, 
                didDrawPage: (data: any) => drawPageChrome(doc, data)
            });
            
            currentY = (doc as any).lastAutoTable?.finalY === undefined ? currentY + 10 : (doc as any).lastAutoTable.finalY + 10;
             if (nonSettlementExpenses.length === 0) { 
                 currentY = pageMargin + 65; // Adjusted based on title block and currency info
                 doc.setFontSize(9);
                 doc.setTextColor(pdfColors.bodyText[0], pdfColors.bodyText[1], pdfColors.bodyText[2]);
                 doc.text("No expenses recorded for this group yet.", pageMargin, currentY);
                 currentY += 10;
             }

            if (currentY + 30 > doc.internal.pageSize.getHeight() - (pageMargin + 10)) { 
                doc.addPage();
                currentY = pageMargin + 5; 
            }

            doc.setFontSize(14);
            doc.setFont("helvetica", "bold");
            doc.setTextColor(pdfColors.sectionHeaderText[0], pdfColors.sectionHeaderText[1], pdfColors.sectionHeaderText[2]);
            doc.text("Final Settlement", pageMargin, currentY);
            currentY += 7;

            const headDebts = [['Payer (Owes)', 'Recipient (Is Owed)', 'Amount']];
            const bodyDebts = debts.map(debt => [
                sanitizePdfString(getUserName(debt.fromUserId)),
                sanitizePdfString(getUserName(debt.toUserId)),
                formatAmountForPdf(debt.amount)
            ]);
            
            if (debts.length > 0) {
                (doc as any).autoTable({
                    startY: currentY,
                    head: headDebts,
                    body: bodyDebts,
                    theme: 'grid',
                    headStyles: { 
                        fillColor: pdfColors.settlementHeaderBg,
                        textColor: pdfColors.headerText,
                        fontStyle: 'bold',
                        fontSize: 9,
                    },
                    styles: { 
                        fontSize: 8, 
                        cellPadding: 1.8, 
                        lineColor: pdfColors.tableLine, 
                        lineWidth: 0.1,
                        textColor: pdfColors.bodyText
                    },
                    tableLineColor: pdfColors.tableLine,
                    margin: { left: pageMargin, right: pageMargin },
                    didDrawPage: (data: any) => drawPageChrome(doc, data)
                });
            } else {
                 doc.setFontSize(9);
                 doc.setTextColor(pdfColors.bodyText[0], pdfColors.bodyText[1], pdfColors.bodyText[2]);
                 doc.text("All settled up! No outstanding debts.", pageMargin, currentY);
            }
            if (!(doc as any).lastAutoTable?.didDrawPage && doc.internal.getNumberOfPages() === 1 && (nonSettlementExpenses.length > 0 || debts.length > 0)) {
                 const finalPageData = { pageNumber: doc.internal.getNumberOfPages(), pageCount: doc.internal.getNumberOfPages() };
                 drawPageChrome(doc, finalPageData);
            } else if (doc.internal.getNumberOfPages() > 1 && !(doc as any).lastAutoTable?.didDrawPage) {
                 const finalPageData = { pageNumber: doc.internal.getNumberOfPages(), pageCount: doc.internal.getNumberOfPages() };
                 drawPageChrome(doc, finalPageData);
            } else if ((nonSettlementExpenses.length === 0 && debts.length === 0)){ 
                const finalPageData = { pageNumber: 1, pageCount: 1 };
                 drawPageChrome(doc, finalPageData);
            }
            
            doc.save(`summary_${groupNameSanitizedForFilename || 'group'}.pdf`);

        } catch (error) {
            alert("An error occurred while generating the PDF. Please check the console for details.");
            console.error("Error generating PDF:", error);
        }
    };


    const escapeCsvCell = (cellData: any): string => {
        const stringData = String(cellData == null ? '' : cellData);
        if (stringData.includes(',') || stringData.includes('"') || stringData.includes('\n')) {
            return `"${stringData.replace(/"/g, '""')}"`;
        }
        return stringData;
    };

    const handleDownloadCSV = () => {
        const csvRows: string[][] = [];

        csvRows.push([`Expense Summary for Group: ${group.name}`]);
        csvRows.push([`Currency: ${selectedCurrency}`]);
        csvRows.push([]); // Blank line

        csvRows.push(['Date', 'Description', 'Category', 'Total Amount', 'Paid By (User:Amount;...)', 'Split Type', 'Split Details (User:Owes Amt/Percent/Shares;...)']);
        nonSettlementExpenses.forEach(exp => {
            const paidByStr = exp.payers.map(p => `${getUserName(p.userId)}:${p.amountPaid}`).join('; ');
            const splitDetailsStr = exp.splitDetails.map(sd => {
                let detail = `${getUserName(sd.userId)}:${sd.owes}`;
                if (exp.splitType === SplitType.PERCENTAGE && sd.percentage) detail += ` (${sd.percentage}%)`;
                if (exp.splitType === SplitType.SHARES && sd.shares) detail += ` (${sd.shares} sh.)`;
                return detail;
            }).join('; ');

            csvRows.push([
                formatDate(exp.date),
                exp.description,
                exp.category || '',
                String(exp.totalAmount), 
                paidByStr,
                exp.splitType,
                splitDetailsStr
            ]);
        });

        if (nonSettlementExpenses.length > 0) csvRows.push([]); 

        csvRows.push(['Payer (Owes)', 'Recipient (Is Owed)', 'Amount']);
        debts.forEach(debt => {
            csvRows.push([
                getUserName(debt.fromUserId),
                getUserName(debt.toUserId),
                String(debt.amount) 
            ]);
        });
        if(debts.length === 0) {
            csvRows.push(["All settled up!", "", ""]);
        }


        const csvContent = csvRows.map(row => row.map(escapeCsvCell).join(",")).join("\n");
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement("a");
        if (link.download !== undefined) {
            const url = URL.createObjectURL(blob);
            link.setAttribute("href", url);
            link.setAttribute("download", `summary_${groupNameSanitizedForFilename || 'group'}.csv`);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        } else {
            alert("CSV download is not supported by your browser.");
        }
    };
    
    return (
        <Modal isOpen={isOpen} onClose={onClose} title={`Expense Summary: ${group.name}`} size="2xl">
            <div className="space-y-6 max-h-[70vh] sm:max-h-[75vh] overflow-y-auto pr-2 custom-scrollbar">
                <section>
                    <h3 className="text-lg font-semibold text-gray-700 dark:text-darkText mb-3 border-b pb-2 dark:border-gray-600">Expenses Details ({nonSettlementExpenses.length})</h3>
                    {nonSettlementExpenses.length > 0 ? (
                        <div className="overflow-x-auto">
                            <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700 text-sm">
                                <thead className="bg-gray-50 dark:bg-gray-700">
                                    <tr>
                                        <th scope="col" className="px-3 py-3 text-left font-medium text-gray-500 dark:text-gray-300 tracking-wider">Date</th>
                                        <th scope="col" className="px-3 py-3 text-left font-medium text-gray-500 dark:text-gray-300 tracking-wider">Description</th>
                                        <th scope="col" className="px-3 py-3 text-left font-medium text-gray-500 dark:text-gray-300 tracking-wider">Category</th>
                                        <th scope="col" className="px-3 py-3 text-left font-medium text-gray-500 dark:text-gray-300 tracking-wider">Total</th>
                                        <th scope="col" className="px-3 py-3 text-left font-medium text-gray-500 dark:text-gray-300 tracking-wider">Paid By</th>
                                        <th scope="col" className="px-3 py-3 text-left font-medium text-gray-500 dark:text-gray-300 tracking-wider">Split Details</th>
                                    </tr>
                                </thead>
                                <tbody className="bg-white dark:bg-darkSurface divide-y divide-gray-200 dark:divide-gray-600">
                                    {nonSettlementExpenses.map(exp => (
                                        <tr key={exp.id} className="hover:bg-gray-50 dark:hover:bg-gray-700/50">
                                            <td className="px-3 py-3 whitespace-nowrap text-gray-900 dark:text-darkText">{formatDate(exp.date)}</td>
                                            <td className="px-3 py-3 text-gray-900 dark:text-darkText min-w-[150px] max-w-[250px] truncate" title={exp.description}>{exp.description}</td>
                                            <td className="px-3 py-3 whitespace-nowrap text-gray-900 dark:text-darkText">{exp.category || '-'}</td>
                                            <td className="px-3 py-3 whitespace-nowrap text-gray-900 dark:text-darkText">{formatCurrency(exp.totalAmount, selectedCurrency)}</td>
                                            <td className="px-3 py-3 text-gray-900 dark:text-darkText min-w-[150px]">
                                                {exp.payers.map(p => (
                                                    <div key={`${exp.id}-payer-${p.userId}`} className="truncate" title={`${getUserName(p.userId)}: ${formatCurrency(p.amountPaid, selectedCurrency)}`}>{getUserName(p.userId)}: {formatCurrency(p.amountPaid, selectedCurrency)}</div>
                                                ))}
                                            </td>
                                            <td className="px-3 py-3 text-gray-900 dark:text-darkText min-w-[200px]">
                                                {exp.splitDetails.map(sd => {
                                                    let detailText = `${formatCurrency(sd.owes, selectedCurrency)}`;
                                                    if (exp.splitType === SplitType.PERCENTAGE && sd.percentage) detailText += ` (${sd.percentage}%)`;
                                                    if (exp.splitType === SplitType.SHARES && sd.shares) detailText += ` (${sd.shares} sh.)`;
                                                    const fullText = `${getUserName(sd.userId)}: ${detailText}`;
                                                    return <div key={`${exp.id}-split-${sd.userId}`} className="truncate" title={fullText}>{fullText}</div>;
                                                })}
                                            </td>
                                        </tr>
                                    ))}
                                </tbody>
                            </table>
                        </div>
                    ) : (
                        <p className="text-gray-500 dark:text-darkMuted">No expenses recorded for this group yet.</p>
                    )}
                </section>

                <section>
                    <h3 className="text-lg font-semibold text-gray-700 dark:text-darkText mb-3 border-b pb-2 dark:border-gray-600">Final Settlement</h3>
                    {debts.length > 0 ? (
                        <div className="overflow-x-auto">
                            <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700 text-sm">
                                <thead className="bg-gray-50 dark:bg-gray-700">
                                     <tr>
                                        <th scope="col" className="px-3 py-3 text-left font-medium text-gray-500 dark:text-gray-300 tracking-wider">Payer (Owes)</th>
                                        <th scope="col" className="px-3 py-3 text-left font-medium text-gray-500 dark:text-gray-300 tracking-wider">Recipient (Is Owed)</th>
                                        <th scope="col" className="px-3 py-3 text-left font-medium text-gray-500 dark:text-gray-300 tracking-wider">Amount</th>
                                    </tr>
                                </thead>
                                <tbody className="bg-white dark:bg-darkSurface divide-y divide-gray-200 dark:divide-gray-600">
                                    {debts.map(debt => (
                                        <tr key={debt.id} className="hover:bg-gray-50 dark:hover:bg-gray-700/50">
                                            <td className="px-3 py-3 whitespace-nowrap text-gray-900 dark:text-darkText">{getUserName(debt.fromUserId)}</td>
                                            <td className="px-3 py-3 whitespace-nowrap text-gray-900 dark:text-darkText">{getUserName(debt.toUserId)}</td>
                                            <td className="px-3 py-3 whitespace-nowrap text-primary-600 dark:text-primary-400 font-semibold">{formatCurrency(debt.amount, selectedCurrency)}</td>
                                        </tr>
                                    ))}
                                </tbody>
                            </table>
                        </div>
                    ) : (
                        <p className="text-green-600 dark:text-green-400 font-semibold">🎉 All Settled Up! No outstanding debts.</p>
                    )}
                </section>
            </div>

            <div className="flex flex-wrap justify-end space-x-3 pt-6 mt-4 border-t border-gray-200 dark:border-gray-600">
                <button
                    onClick={handleDownloadCSV}
                    className={`${commonButtonClass.replace('bg-primary-500', 'bg-blue-500').replace('hover:bg-primary-600', 'hover:bg-blue-600')} flex items-center text-xs px-3 py-1.5 mt-2 sm:mt-0`}
                    aria-label="Download expense summary as CSV"
                >
                    <ArrowDownTrayIcon className="w-4 h-4 mr-1.5" /> Download CSV
                </button>
                <button
                    onClick={handleDownloadPDF}
                    className={`${commonButtonClass.replace('bg-primary-500', 'bg-red-500').replace('hover:bg-primary-600', 'hover:bg-red-600')} flex items-center text-xs px-3 py-1.5 mt-2 sm:mt-0`}
                    aria-label="Download expense summary as PDF"
                >
                   <ArrowDownTrayIcon className="w-4 h-4 mr-1.5" /> Download PDF
                </button>
                <button type="button" onClick={onClose} className={`${commonButtonClass.replace('text-white', 'text-gray-700 dark:text-gray-300').replace('bg-primary-500', 'bg-gray-100 dark:bg-gray-600').replace('hover:bg-primary-600', 'hover:bg-gray-200 dark:hover:bg-gray-500')} mt-2 sm:mt-0`} aria-label="Close summary modal">Close</button>
            </div>
        </Modal>
    );
};

export default SummaryModal;